"use strict";

exports.__esModule = true;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var snapgeneToJson = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee4(fileObj) {
    var _this = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ret;

    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            return _context4.delegateYield( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
              // eslint-disable-next-line no-inner-declarations
              var read = function read(size, fmt) {
                var buffer = Buffer.from(arrayBuffer.slice(offset, size + offset));
                offset += size;
                if (fmt) {
                  var decoder = new _string_decoder.StringDecoder(fmt);
                  var toRet = decoder.write(buffer);
                  return toRet;
                } else {
                  return buffer;
                }
              };
              // eslint-disable-next-line no-inner-declarations


              var unpack = function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(size, mode) {
                  var buffer, unpacked;
                  return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return read(size);

                        case 2:
                          buffer = _context.sent;
                          _context.next = 5;
                          return _bufferpack2.default.unpack(">" + mode, buffer);

                        case 5:
                          unpacked = _context.sent;

                          if (!(unpacked === undefined)) {
                            _context.next = 8;
                            break;
                          }

                          return _context.abrupt("return", undefined);

                        case 8:
                          _context.next = 10;
                          return unpacked[0];

                        case 10:
                          return _context.abrupt("return", _context.sent);

                        case 11:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, this);
                }));

                return function unpack(_x3, _x4) {
                  return _ref2.apply(this, arguments);
                };
              }();

              var returnVal, arrayBuffer, offset, length, title, data, next_byte, block_size, props, binaryRep, size, xml, b, name, description;
              return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      returnVal = (0, _createInitialSequence2.default)(options);
                      _context3.next = 3;
                      return (0, _getArrayBufferFromFile2.default)(fileObj);

                    case 3:
                      arrayBuffer = _context3.sent;
                      offset = 0;
                      _context3.next = 7;
                      return read(1);

                    case 7:
                      _context3.next = 9;
                      return unpack(4, "I");

                    case 9:
                      length = _context3.sent;
                      _context3.next = 12;
                      return read(8, "ascii");

                    case 12:
                      title = _context3.sent;

                      if (!(length !== 14 || title !== "SnapGene")) {
                        _context3.next = 15;
                        break;
                      }

                      throw new Error("Wrong format for a SnapGene file !");

                    case 15:
                      _context3.t0 = _extends;
                      _context3.t1 = {};
                      _context3.t2 = returnVal.parsedSequence;
                      _context3.next = 20;
                      return unpack(2, "H");

                    case 20:
                      _context3.t3 = !!_context3.sent;
                      _context3.next = 23;
                      return unpack(2, "H");

                    case 23:
                      _context3.t4 = _context3.sent;
                      _context3.next = 26;
                      return unpack(2, "H");

                    case 26:
                      _context3.t5 = _context3.sent;
                      _context3.t6 = [];
                      _context3.t7 = {
                        isDNA: _context3.t3,
                        exportVersion: _context3.t4,
                        importVersion: _context3.t5,
                        features: _context3.t6
                      };
                      _context3.next = 31;
                      return (0, _context3.t0)(_context3.t1, _context3.t2, _context3.t7);

                    case 31:
                      data = _context3.sent;

                    case 32:
                      if (!(offset <= arrayBuffer.byteLength)) {
                        _context3.next = 75;
                        break;
                      }

                      _context3.next = 35;
                      return read(1);

                    case 35:
                      next_byte = _context3.sent;
                      _context3.next = 38;
                      return unpack(4, "I");

                    case 38:
                      block_size = _context3.sent;

                      if (!(ord(next_byte) === 0)) {
                        _context3.next = 54;
                        break;
                      }

                      _context3.next = 42;
                      return unpack(1, "b");

                    case 42:
                      props = _context3.sent;
                      binaryRep = dec2bin(props);


                      data.circular = isFirstBitA1(binaryRep);
                      size = block_size - 1;

                      if (!(size < 0)) {
                        _context3.next = 48;
                        break;
                      }

                      return _context3.abrupt("return", {
                        v: void 0
                      });

                    case 48:
                      data.size = size;
                      //   data["dna"] = {
                      //     topology="circular" if props & 0x01 else "linear",
                      //     strandedness="double" if props & 0x02 > 0 else "single",
                      //     damMethylated=props & 0x04 > 0,
                      //     dcmMethylated=props & 0x08 > 0,
                      //     ecoKIMethylated=props & 0x10 > 0,
                      //     length=block_size - 1
                      //   }
                      _context3.next = 51;
                      return read(size, "ascii");

                    case 51:
                      data.sequence = _context3.sent;
                      _context3.next = 73;
                      break;

                    case 54:
                      if (!(ord(next_byte) === 10)) {
                        _context3.next = 58;
                        break;
                      }

                      return _context3.delegateYield( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                        var strand_dict, xml, b, _b$Features, _b$Features$Feature, Feature;

                        return _regenerator2.default.wrap(function _callee2$(_context2) {
                          while (1) {
                            switch (_context2.prev = _context2.next) {
                              case 0:
                                //   # READ THE FEATURES
                                strand_dict = { "0": ".", "1": "+", "2": "-", "3": "=" };
                                //   const format_dict = {'@text': parse, '@int': int}

                                _context2.next = 3;
                                return read(block_size, "utf8");

                              case 3:
                                xml = _context2.sent;
                                _context2.next = 6;
                                return parseXml(xml);

                              case 6:
                                b = _context2.sent;
                                _b$Features = b.Features;
                                _b$Features = _b$Features === undefined ? {} : _b$Features;
                                _b$Features$Feature = _b$Features.Feature, Feature = _b$Features$Feature === undefined ? [] : _b$Features$Feature;

                                data.features = [];
                                Feature.forEach(function (_ref3) {
                                  var attrs = _ref3.$,
                                      _ref3$Q = _ref3.Q,
                                      additionalAttrs = _ref3$Q === undefined ? [] : _ref3$Q,
                                      _ref3$Segment = _ref3.Segment,
                                      Segment = _ref3$Segment === undefined ? [] : _ref3$Segment;

                                  var color = void 0;
                                  var maxStart = 0;
                                  var maxEnd = 0;
                                  var segments = Segment && Segment.map(function (_ref4) {
                                    var seg = _ref4.$;

                                    if (!seg) throw new Error("invalid feature definition");
                                    var range = seg.range;

                                    color = seg.color;

                                    var _getStartAndEndFromRa = getStartAndEndFromRangeString(range),
                                        start = _getStartAndEndFromRa.start,
                                        end = _getStartAndEndFromRa.end;

                                    maxStart = Math.max(maxStart, start);
                                    maxEnd = Math.max(maxEnd, end);
                                    return _extends({}, seg, {
                                      start: start,
                                      end: end
                                    });
                                  });
                                  var directionality = attrs.directionality;

                                  data.features.push(_extends({}, attrs, {
                                    strand: strand_dict[directionality],
                                    start: maxStart,
                                    end: maxEnd,
                                    color: color,
                                    segments: segments
                                  }));
                                });

                              case 12:
                              case "end":
                                return _context2.stop();
                            }
                          }
                        }, _callee2, _this);
                      })(), "t8", 56);

                    case 56:
                      _context3.next = 73;
                      break;

                    case 58:
                      if (!(ord(next_byte) === 6)) {
                        _context3.next = 71;
                        break;
                      }

                      _context3.next = 61;
                      return read(block_size, "utf8");

                    case 61:
                      xml = _context3.sent;
                      _context3.next = 64;
                      return parseXml(xml);

                    case 64:
                      b = _context3.sent;
                      name = (0, _lodash.get)(b, "Notes.CustomMapLabel[0]");

                      if (name) {
                        data.name = name;
                      }

                      description = (0, _lodash.get)(b, "Notes.Description[0]");

                      if (description) {
                        data.description = description;
                      }
                      _context3.next = 73;
                      break;

                    case 71:
                      _context3.next = 73;
                      return read(block_size);

                    case 73:
                      _context3.next = 32;
                      break;

                    case 75:
                      returnVal.parsedSequence = data;
                      return _context3.abrupt("return", {
                        v: (0, _validateSequenceArray2.default)((0, _flattenSequenceArray2.default)([returnVal], options), options)
                      });

                    case 77:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, _this);
            })(), "t0", 2);

          case 2:
            _ret = _context4.t0;

            if (!((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object")) {
              _context4.next = 5;
              break;
            }

            return _context4.abrupt("return", _ret.v);

          case 5:
            _context4.next = 11;
            break;

          case 7:
            _context4.prev = 7;
            _context4.t1 = _context4["catch"](0);

            console.error("Error trying to parse file as snapgene:", _context4.t1);
            return _context4.abrupt("return", [{
              success: false,
              messages: ["Import Error: Invalid File"]
            }]);

          case 11:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this, [[0, 7]]);
  }));

  return function snapgeneToJson(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _bufferpack = require("bufferpack");

var _bufferpack2 = _interopRequireDefault(_bufferpack);

var _xml2js = require("xml2js");

var _xml2js2 = _interopRequireDefault(_xml2js);

var _string_decoder = require("string_decoder");

var _getArrayBufferFromFile = require("./utils/getArrayBufferFromFile");

var _getArrayBufferFromFile2 = _interopRequireDefault(_getArrayBufferFromFile);

var _createInitialSequence = require("./utils/createInitialSequence");

var _createInitialSequence2 = _interopRequireDefault(_createInitialSequence);

var _validateSequenceArray = require("./utils/validateSequenceArray");

var _validateSequenceArray2 = _interopRequireDefault(_validateSequenceArray);

var _flattenSequenceArray = require("./utils/flattenSequenceArray");

var _flattenSequenceArray2 = _interopRequireDefault(_flattenSequenceArray);

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } //note: Huge credit and thanks go to IsaacLuo from whose python repository this code was adapted
// https://github.com/IsaacLuo/SnapGeneFileReader

var Buffer = require("buffer/").Buffer;

function getStartAndEndFromRangeString(rangestring) {
  var _rangestring$split = rangestring.split("-"),
      start = _rangestring$split[0],
      end = _rangestring$split[1];

  return {
    start: start - 1,
    end: end - 1
  };
}

function ord(string) {
  //  discuss at: http://locutus.io/php/ord/
  // original by: Kevin van Zonneveld (http://kvz.io)
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  // improved by: Brett Zamir (http://brett-zamir.me)
  //    input by: incidence
  //   example 1: ord('K')
  //   returns 1: 75
  //   example 2: ord('\uD800\uDC00'); // surrogate pair to create a single Unicode character
  //   returns 2: 65536

  var str = string + "";
  var code = str.charCodeAt(0);

  if (code >= 0xd800 && code <= 0xdbff) {
    // High surrogate (could change last hex to 0xDB7F to treat
    // high private surrogates as single characters)
    var hi = code;
    if (str.length === 1) {
      // This is just a high surrogate with no following low surrogate,
      // so we return its value;
      return code;
      // we could also throw an error as it is not a complete character,
      // but someone may want to know
    }
    var low = str.charCodeAt(1);
    return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
  }
  if (code >= 0xdc00 && code <= 0xdfff) {
    // Low surrogate
    // This is just a low surrogate with no preceding high surrogate,
    // so we return its value;
    return code;
    // we could also throw an error as it is not a complete character,
    // but someone may want to know
  }

  return code;
}

function parseXml(string) {
  return new Promise(function (resolve, reject) {
    _xml2js2.default.parseString(string, function (err, result) {
      err && reject(err);
      resolve(result);
    });
  });
}

exports.default = snapgeneToJson;


function dec2bin(dec) {
  return (dec >>> 0).toString(2);
}

function isFirstBitA1(num) {
  return Number(num.toString().split("").pop()) === 1;
}
module.exports = exports["default"];