"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = function convertDnaCaretPositionOrRangeToAA(rangeOrCaret) {
  if ((typeof rangeOrCaret === "undefined" ? "undefined" : _typeof(rangeOrCaret)) === "object" && rangeOrCaret !== null) {
    return convertDnaRangeToAARange(_extends({}, rangeOrCaret, {
      locations: rangeOrCaret.locations ? rangeOrCaret.locations.map(convertDnaRangeToAARange) : undefined
    }));
  } else {
    return convertDnaCaretPositionToAACaretPosition(rangeOrCaret);
  }
};

function convertDnaCaretPositionToAACaretPosition(caret) {
  return Math.floor(caret / 3);
}

function convertDnaRangeToAARange(range) {
  return _extends({}, range, {
    start: range.start > -1 ? Math.floor(range.start / 3) : range.start,
    end: range.end > -1 ? Math.floor(range.end - 2) / 3 : range.end
  });
}